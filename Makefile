
###
## DO NOT DELETE THIS FILE!
##
## TODO: move to something saner, like mason, or cmake.
##       currently assumes gcc setup
##       also, currently adds .exe. sorry.
###

THIS = cproto
RELEASE = 4_7o

#### Start of system configuration section. ####

srcdir = .


CC		?= gcc
CPP		= gcc -E
LEX		?= flex
YACC		?= bison
LINT		= 
CTAGS		= ctags

INSTALL		= /usr/bin/install -c
INSTALL_PROGRAM	= ${INSTALL}
INSTALL_DATA	= ${INSTALL} -m 644

DEFINES		=
EXTRA_CFLAGS	= 
CPPFLAGS	= -I. -I$(srcdir) $(DEFINES) -DHAVE_CONFIG_H  -D_GNU_SOURCE -D_DEFAULT_SOURCE
CFLAGS		= -g -O2 $(EXTRA_CFLAGS)
LIBS		=  -lfl

prefix		= ${PWD}/dist
exec_prefix	= ${prefix}
datarootdir	= ${prefix}/share

bindir		= ${exec_prefix}/bin
mandir		= ${datarootdir}/man
manext		= 1

BINDIR		= $(DESTDIR)$(bindir)
MANDIR		= $(DESTDIR)$(mandir)/man$(manext)

x		= .exe
o		= .o

#### End of system configuration section. ####

SHELL		= /bin/sh


PROG		= $(THIS)$x

LDFLAGS		= 

DOC_FILES = \
	README \
	CHANGES \
	$(THIS).1

MAK_FILES = \
	Makefile.in \
	configure.in \
	aclocal.m4 \
	config_h.in

H_FILES = \
	yyerror.c \
	system.h \
	$(THIS).h \
	semantic.h \
	symbol.h \
	headlex.h \
	headyacc.h \
	inc.liblex.c

C_FILES = \
	$(THIS).c \
	dump.c \
	lintlibs.c \
	semantic.c \
	strkey.c \
	symbol.c \
	trace.c \
	yyerror.c

AUX_FILES = \
	lex.l \
	grammar.y

JUNK =	\
	lex.yy.c \
	y.tab.c \
	y.tab.h

EXTRA_OBJS = 
OBJECTS = \
	$(THIS)$o \
	lintlibs$o \
	semantic$o \
	strkey$o \
	symbol$o \
	y.tab$o \
	$(EXTRA_OBJS)
SOURCES = $(DOC_FILES) $(MAK_FILES) $(H_FILES) $(C_FILES) $(AUX_FILES)

all : $(PROG) # $(THIS).man

install: all installdirs
	$(INSTALL_PROGRAM) $(PROG) $(BINDIR)/$(PROG)
	- $(INSTALL_DATA) $(srcdir)/$(THIS).1 $(MANDIR)/$(THIS).$(manext)

installdirs:
	mkdir -p $(BINDIR)
	- mkdir -p $(MANDIR)

uninstall:
	- rm -f $(BINDIR)/$(PROG) $(MANDIR)/$(THIS).$(manext)

.c$o:
	
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $<

$(PROG) : $(OBJECTS)
	$(CC) $(LDFLAGS) $(CFLAGS) -o $@ $(OBJECTS) $(LIBS)

y.tab.c : grammar.y
	$(YACC) -y -d $(srcdir)/grammar.y

lex.yy.c : lex.l
	$(LEX) $(srcdir)/lex.l

mostlyclean ::
	- rm -f core .nfs* *$o *.bak *.BAK *.out $(JUNK) default.h

clean :: mostlyclean
	- rm -f $(PROG)
	- cd $(srcdir)/testing && $(MAKE) $@

distclean :: clean
	- rm -f  man2html.tmp
	- rm -f .version .fname
	- cd $(srcdir)/testing && $(MAKE) $@

realclean :: distclean
	- rm -f tags
	- cd $(srcdir)/testing && $(MAKE) $@

check \
check_errors:	$(PROG)
	cd $(srcdir)/testing && $(MAKE) $@

# I keep my sources in RCS, and assign a symbolic release to the current patch
# level.  The 'manifest' script knows how to build a list of files for a given
# revision -TD
MANIFEST:
	manifest -rv$(RELEASE) \
		$(THIS).man \
		$(srcdir)/testing/case*.dcl \
		$(srcdir)/testing/case*.bat

dist: MANIFEST
	- rm -f .fname .files
	echo '$(THIS)-$(RELEASE)' >.fname
	cat MANIFEST | grep ' ' | egrep -v ' subdirectory$$' | sed -e 's/\ .*//' | uniq >.files
	rm -rf `cat .fname`
	TOP=`cat .fname`; mkdir $$TOP `cat .files | grep / | sed -e 's@/.*@@' | sed -e s@\^@$$TOP/@ | uniq`
	for file in `cat .files`; do \
	  ln $(srcdir)/$$file `cat .fname`/$$file \
	    || { echo copying $$file instead; cp $$file `cat .fname`/$$file; }; \
	done
	tar -cf - `cat .fname` | gzip >`cat .fname`.tgz
	rm -rf `cat .fname` .fname .files

default.h: $(C_FILES) lex.yy.c
	./$(PROG) -e -v -m -M ARGS -d $(DEFINES) $(C_FILES) grammar.y >$@

getopt.o : $(srcdir)/porting/getopt.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(srcdir)/porting/getopt.c

popen.o : $(srcdir)/porting/popen.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(srcdir)/porting/popen.c

lint: $(C_FILES) $(JUNK)
	$(LINT) $(CPPFLAGS) $(C_FILES) y.tab.c >$@.out

llib: $(C_FILES) $(JUNK)
	./$(PROG) -l $(CPPFLAGS) $(C_FILES) y.tab.c >$@.out

self: $(C_FILES) $(JUNK)
	./$(PROG) $(CPPFLAGS) $(C_FILES) y.tab.c >$@.out

tags: $(H_FILES) $(C_FILES) $(AUX_FILES)
	$(CTAGS) $(C_FILES) $(AUX_FILES) $(H_FILES)

depend:
	makedepend -- $(CPPFLAGS) -- $(C_FILES) y.tab.c

# DO NOT DELETE THIS LINE -- make depend depends on it.

cproto$o   : cproto.h config.h system.h
lintlibs$o : cproto.h config.h system.h semantic.h symbol.h
semantic$o : cproto.h config.h system.h semantic.h
strkey$o   : cproto.h config.h system.h 
symbol$o   : cproto.h config.h system.h symbol.h
y.tab$o	   : cproto.h config.h system.h symbol.h semantic.h lex.yy.c yyerror.c
################################################################################
## generated by CF_MAKE_DOCS
.SUFFIXES : .html .1 .man .ps .pdf .txt

#.1.txt :
#	$(SHELL) -c "tbl $*.1 | nroff -man | col -bx" >$@

.ps.pdf :
	ps2pdf $*.ps

.1.ps :
	$(SHELL) -c "tbl $*.1 | groff -man" >$@

.1.txt :
	GROFF_NO_SGR=stupid $(SHELL) -c "tbl $*.1 | nroff -Tascii -man | col -bx" >$@

.1.html :
	./man2html.tmp $* 1 man >$@

################################################################################
#docs docs-cproto :: cproto.txt
docs docs-cproto :: cproto.html
docs docs-cproto :: cproto.pdf
docs docs-cproto :: cproto.ps
docs docs-cproto :: cproto.txt

clean \
docs-clean ::
#	rm -f cproto.txt
	rm -f cproto.html
	rm -f cproto.pdf
	rm -f cproto.ps
	rm -f cproto.txt

#cproto.txt  : cproto.1
cproto.html : cproto.1
cproto.pdf  : cproto.ps
cproto.ps   : cproto.1
cproto.txt  : cproto.1
